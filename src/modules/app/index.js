import { set, wait, merge, debounce } from 'cerebral/operators';
import { state, props, input, string } from 'cerebral/tags';

import { VIEWS } from 'common/constants';

// Actions
function messageToUperCase({state, props}) {
  return {
    message: props.message.toUpperCase()
  };
}
function shoutIt({state, props}) {
  return {
    message: `${props.message}!!!`
  }
}
function testAsync({state, props}) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, 1000);
  });
}
function getRepo({props, http, path}) {
  return http.get(`/repos/cerebral/${props.repo}`)
    .then((response) => {
      return path.success({data: response.result});
    })
    .catch((error) => {
      return path.error({data: error.result});
    });
}

// Chain Factories
function showMessage(message, ms) {
  return [
    set(state`app.subTitle`, message), // simple action generated by operator 'set'
    wait(ms), // simple action generated by operator 'wait'
    set(state`app.subTitle`, null) // simple action generated by operator 'set'
  ];
}
const toastDebounce = debounce.shared();
function showToast(message, ms, type = null) {
  return [
    set(state`app.toastMsg`, message),
    toastDebounce(ms), {
      continue: [
        set(state`app.toastMsg`, null)
      ],
      discard: []
    }
  ];
}

export default {
  state: {
    currentView: VIEWS.PLAYERS,
    subTitle: 'Some subtitle!',
    toastMsg: null
  },
  signals: {
    changeSubtitle: [
      shoutIt,
      messageToUperCase,
      testAsync,
      ...showMessage(props`message`, 1000) //chain facctory
    ],
    buttonClicked: [
      [
        ...showToast(string`Loading data for repo ${props`repo`}`, 2000),
        getRepo, {
          success: [
            ...showToast(string`${props`repo`} has ${props`data.subscribers_count`} and ${props`data.stargazers_count`} stars!`, 3000)
          ],
          error: [
            ...showToast(string`Ooops something went wrong ${props`data.message`}`, 3000)
          ]
        },
      ],
      ...showToast(string`That's all!`, 1000),
    ],
    notFoundRouted: [
      set(state`app.currentView`, VIEWS.NOT_FOUND)
    ]
  }
};
